{"version":3,"sources":["METROGNOME.PNG","on.svg","off.svg","components/Metronome/Metronome.js","App.js","reportWebVitals.js","index.js"],"names":["Metronome","props","nextNote","secondsPerBeat","state","tempo","setState","nextNoteTime","currentQuarterNote","scheduleNote","beatNumber","time","notesInQueue","note","osc","audioContext","createOscillator","envelope","createGain","frequency","value","gain","exponentialRampToValueAtTime","connect","destination","start","stop","scheduler","currentTime","scheduleAheadTime","isRunning","window","AudioContext","webkitAudioContext","tcurrentQuarterNote","intervalID","setInterval","lookahead","clearInterval","startStop","message","className","class","this","type","min","max","onChange","e","target","onClick","src","off","alt","on","React","Component","App","METROGNOME","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAe,G,MAAA,IAA0B,wC,2CCA1B,G,MAAA,IAA0B,gCCA1B,MAA0B,gCCsH1BA,E,kDA/GX,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,SAAW,WAEP,IAAIC,EAAiB,GAAO,EAAKC,MAAMC,MACvC,EAAKC,SAAS,CACZC,aAAc,EAAKH,MAAMG,aAAeJ,EACxCK,mBAAoB,EAAKJ,MAAMI,mBAAmB,IAEd,IAAlC,EAAKJ,MAAMI,oBACb,EAAKF,SAAS,CACZE,mBAAoB,KAxBT,EA6BnBC,aAAe,SAACC,EAAYC,GAExB,EAAKL,SAAS,CACZM,aAAa,GAAD,mBAAO,EAAKR,MAAMQ,cAAlB,CAAgC,CAAEC,KAAMH,EAAYC,KAAMA,OAExE,IAAMG,EAAM,EAAKV,MAAMW,aAAaC,mBAC9BC,EAAW,EAAKb,MAAMW,aAAaG,aACzCJ,EAAIK,UAAUC,MAASV,EAAa,IAAM,EAAK,KAAO,IACtDO,EAASI,KAAKD,MAAQ,EACtBH,EAASI,KAAKC,6BAA6B,EAAGX,EAAO,MACrDM,EAASI,KAAKC,6BAA6B,KAAOX,EAAO,KACzDG,EAAIS,QAAQN,GACZA,EAASM,QAAQ,EAAKnB,MAAMW,aAAaS,aACzCV,EAAIW,MAAMd,GACVG,EAAIY,KAAKf,EAAO,MA3CD,EA8CnBgB,UAAY,WAER,KAAO,EAAKvB,MAAMG,aAAe,EAAKH,MAAMW,aAAaa,YAAc,EAAKxB,MAAMyB,mBAC9E,EAAKpB,aAAa,EAAKL,MAAMI,mBAAoB,EAAKJ,MAAMG,cAC5D,EAAKL,YAlDM,EAsDnBuB,MAAQ,WAEA,EAAKrB,MAAM0B,YAEiB,OAA5B,EAAK1B,MAAMW,cAEX,EAAKT,SAAS,CACZS,aAAc,IAAKgB,OAAOC,cAAgBD,OAAOE,sBAGvD,EAAK3B,SAAS,CACZwB,WAAW,EACXI,oBAAqB,EACrB3B,aAAc,IACd4B,WAAYC,aAAY,kBAAM,EAAKT,cAAa,EAAKvB,MAAMiC,eApE9C,EAwEnBX,KAAO,WAEH,EAAKpB,SAAS,CACZwB,WAAW,IAEbQ,cAAc,EAAKlC,MAAM+B,aA7EV,EAgFnBI,UAAY,WAEJ,EAAKnC,MAAM0B,UACX,EAAKJ,OAGL,EAAKD,SApFX,EAAKrB,MAAQ,CACTW,aAAc,KACdH,aAAc,GACdJ,mBAAoB,EACpBH,MAAO,IACPgC,UAAW,GACXR,kBAAmB,GACnBtB,aAAc,EACduB,WAAW,EACXK,WAAY,KACZK,QAAS,+CAZI,E,qDAyFb,IAAD,OACP,OACQ,sBAAKC,UAAU,YAAf,UACE,mBAAGC,MAAM,SAAT,SAAmBC,KAAKvC,MAAMoC,UAC9B,oBAAGE,MAAM,cAAT,UAAwBC,KAAKvC,MAAMC,MAAnC,UACA,uBACEuC,KAAK,QACLC,IAAI,KACJC,IAAI,MACJ1B,MAAOuB,KAAKvC,MAAMC,MAClB0C,SAAU,SAACC,GAAD,OAAO,EAAK1C,SAAS,CAC7BD,MAAO2C,EAAEC,OAAO7B,WAGpB,wBAAQ8B,QAAS,kBAAM,EAAKX,aAA5B,SACGI,KAAKvC,MAAM0B,UAAY,qBAAKW,UAAU,SAASU,IAAKC,EAAKC,IAAI,aAAgB,qBAAKZ,UAAU,SAASU,IAAKG,EAAID,IAAI,qB,GA1GzGE,IAAMC,WCQfC,MATf,WACE,OACE,sBAAKhB,UAAU,MAAf,UACE,qBAAKY,IAAI,oBAAoBF,IAAKO,IACnC,cAAC,EAAD,QCIUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.12f24193.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/METROGNOME.a4c7239d.PNG\";","export default __webpack_public_path__ + \"static/media/on.fd8c0096.svg\";","export default __webpack_public_path__ + \"static/media/off.e0c05eab.svg\";","import React from 'react';\nimport './Metronome.css';\nimport on from '../../on.svg';\nimport off from '../../off.svg'\n\nclass Metronome extends React.Component\n{\n    constructor(props) {\n      super(props);\n      this.state = {\n          audioContext: null,\n          notesInQueue: [],\n          currentQuarterNote: 0,\n          tempo: 120,\n          lookahead: 25,    \n          scheduleAheadTime: 0.1,   \n          nextNoteTime: 0.0,\n          isRunning: false,\n          intervalID: null,\n          message: 'Quit all the malarkey and start practicing!'\n    }\n  }\n    nextNote = () =>\n    {\n        var secondsPerBeat = 60.0 / this.state.tempo;\n        this.setState({\n          nextNoteTime: this.state.nextNoteTime + secondsPerBeat,\n          currentQuarterNote: this.state.currentQuarterNote+1,\n        })\n        if (this.state.currentQuarterNote === 4) {\n          this.setState({\n            currentQuarterNote: 0\n          })\n        }\n    }\n\n    scheduleNote = (beatNumber, time) =>\n    {\n        this.setState({\n          notesInQueue: ([...this.state.notesInQueue, { note: beatNumber, time: time }])\n        })\n        const osc = this.state.audioContext.createOscillator();\n        const envelope = this.state.audioContext.createGain();\n        osc.frequency.value = (beatNumber % 4 === 0) ? 1300 : 1000;\n        envelope.gain.value = 1;\n        envelope.gain.exponentialRampToValueAtTime(1, time + 0.001);\n        envelope.gain.exponentialRampToValueAtTime(0.001, time + 0.02);\n        osc.connect(envelope);\n        envelope.connect(this.state.audioContext.destination);\n        osc.start(time);\n        osc.stop(time + 0.03);\n    }\n\n    scheduler = () =>\n    {\n        while (this.state.nextNoteTime < this.state.audioContext.currentTime + this.state.scheduleAheadTime ) {\n            this.scheduleNote(this.state.currentQuarterNote, this.state.nextNoteTime);\n            this.nextNote();\n        }\n    }\n\n    start = () => \n    {\n        if (this.state.isRunning) return;\n\n        if (this.state.audioContext === null)\n        {\n            this.setState({\n              audioContext: new (window.AudioContext || window.webkitAudioContext)()\n            })\n        }\n        this.setState({\n          isRunning: true,\n          tcurrentQuarterNote: 0,\n          nextNoteTime: 0 + 0.05,\n          intervalID: setInterval(() => this.scheduler(), this.state.lookahead)\n        })\n    }\n\n    stop = () =>\n    {\n        this.setState({\n          isRunning: false\n        })\n        clearInterval(this.state.intervalID);\n    }\n\n    startStop = () =>\n    {\n        if (this.state.isRunning) {\n            this.stop();\n        }\n        else {\n            this.start();\n        }\n    }\nrender() {\n  return (\n          <div className=\"metronome\">\n            <p class=\"speech\">{this.state.message}</p>\n            <p class=\"current-bpm\">{this.state.tempo} BPM</p>\n            <input\n              type=\"range\"\n              min=\"60\"\n              max=\"240\"\n              value={this.state.tempo}\n              onChange={(e) => this.setState({\n                tempo: e.target.value\n              })}\n            />\n            <button onClick={() => this.startStop()}>\n              {this.state.isRunning ? <img className=\"on-off\" src={off} alt=\"turn off\" /> : <img className=\"on-off\" src={on} alt=\"turn on\" />}\n            </button>\n          </div>\n        )\n}\n}\n\nexport default Metronome;\n\n// const Metronome = () => {\n//   const [bpm, setBpm] = useState(120);\n//   const [playing, setPlaying] = useState(false);\n//   const [count, setCount] = useState(0);\n//   const [beatsInQueue, setBeats] = useState([]);\n//   const [nextNoteTime, setNextTime] = useState(0.0);\n//   const [audioContext, setAudioContext] = useState(null);\n//   const [intervalID, setIntervalID] = useState(null);\n  \n//   const nextNote = () => {\n//     let secondsPerBeat = 60 / bpm;\n//     setNextTime(secondsPerBeat);\n//     setCount(count+1);\n//     count === 4 && setCount(0);\n//   }\n\n//   const scheduleNote = (beatNumber, time) => {\n//     setBeats([...beatsInQueue, {note: beatNumber, time: time}])\n\n//     const osc = audioContext.createOscillator();\n//     const envelope = audioContext.createGain();\n        \n//     osc.frequency.value = (beatNumber % 4 === 0) ? 1000 : 800;\n//     envelope.gain.value = 1;\n//     envelope.gain.exponentialRampToValueAtTime(1, time + 0.001);\n//     envelope.gain.exponentialRampToValueAtTime(0.001, time + 0.02);\n\n//     osc.connect(envelope);\n//     envelope.connect(audioContext.destination);\n    \n//     osc.start(time);\n//     osc.stop(time + 0.03);\n// }\n\n// const scheduler = () => {\n//     // while there are notes that will need to play before the next interval, schedule them and advance the pointer.\n//     while (nextNoteTime < AudioContext.currentTime + 0.1 ) {\n//         scheduleNote(count, nextNoteTime);\n\n//         // Advance current note and time by a quarter note (crotchet if you're posh)\n//         setNextTime(60.0 / bpm); // Add beat length to last beat time\n//         setCount(count+1);    // Advance the beat number, wrap to zero\n//         if (count === 4) {\n//             setCount(0);\n//             nextNote();\n//         }\n//     }\n// }\n\n// const start = () =>\n// {\n//     if (playing) return;\n\n//     if (audioContext === null)\n//     {\n//       console.log('k')\n//         setAudioContext(new(window.AudioContext || window.webkitAudioContext)());\n//         console.log(audioContext, AudioContext)\n//     }\n\n//     setPlaying(true);\n//     setBeats(0);\n//     setNextTime(AudioContext.currentTime + 0.05);\n//     setIntervalID(setInterval(() => scheduler(), 25))\n// }\n\n// const stop = () =>\n// {\n//     setPlaying(false)\n//     setInterval(intervalID);\n// }\n\n// const startStop = () => {\n//     if (playing) {\n//         stop();\n//     }\n//     else {\n//         start();\n//     }\n// }\n//     return (\n//       <div className=\"metronome\">\n//         {bpm}\n//         <input\n//           type=\"range\"\n//           min=\"60\"\n//           max=\"240\"\n//           value={bpm}\n//           onChange={(e) => setBpm(e.target.value)}\n//         />\n//         <button onClick={() => startStop()}>\n//           {playing ? 'Stop' : 'Start'}\n//         </button>\n//         Metronome Component\n//       </div>\n//     )\n// }\n\n\n// export default Metronome;","import METROGNOME from './METROGNOME.PNG'\nimport './App.css';\nimport Metronome from './components/Metronome/Metronome'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img alt=\"fashionable gnome\" src={METROGNOME} />\n     <Metronome />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}