{"version":3,"sources":["METROGNOME.png","on.svg","off.svg","plus.svg","minus.svg","components/SavedTempos/SavedTempos.js","components/Metronome/Metronome.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SavedTempos","props","songName","tempo","clickHandler","currentTempo","console","log","parseInt","ListGroup","as","defaultActiveKey","Item","className","active","onClick","Metronome","nextNote","secondsPerBeat","state","setState","nextNoteTime","currentQuarterNote","componentDidUpdate","localStorage","setItem","scheduleNote","beatNumber","time","notesInQueue","note","osc","audioContext","createOscillator","envelope","createGain","frequency","value","gain","exponentialRampToValueAtTime","connect","destination","start","stop","scheduler","currentTime","scheduleAheadTime","isRunning","window","AudioContext","webkitAudioContext","intervalID","setInterval","lookahead","clearInterval","startStop","tweakTempo","direction","savedTempo","saveSongToStorage","action","songs","document","querySelector","getItem","JSON","parse","stringify","message","this","src","minus","alt","type","min","max","onChange","e","target","plus","off","on","id","placeholder","class","clear","Object","keys","map","song","React","Component","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.56a832ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/METROGNOME.a4c7239d.png\";","export default __webpack_public_path__ + \"static/media/on.fd8c0096.svg\";","export default __webpack_public_path__ + \"static/media/off.e0c05eab.svg\";","export default __webpack_public_path__ + \"static/media/plus.d5048b9a.svg\";","export default __webpack_public_path__ + \"static/media/minus.fa839e7c.svg\";","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './SavedTempos.css';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst SavedTempos = (props) => {\n    const { songName } = props;\n    const  { tempo } = props;\n    const { clickHandler } = props;\n    const { currentTempo } = props;\n    console.log(currentTempo, parseInt(tempo))\n    const determineIfActive = () => {\n        if (currentTempo === parseInt(tempo)) {\n            return <ListGroup.Item as=\"li\" className=\"song-name\" active onClick={() => clickHandler('custom', tempo)} >\n            {songName} ({tempo} BPM)\n          </ListGroup.Item>\n        } else {\n            return <ListGroup.Item as=\"li\" className=\"song-name\" onClick={() => clickHandler('custom', tempo)} >\n            {songName} ({tempo} BPM)\n          </ListGroup.Item>\n        }\n    }\n    return (\n    <>\n    <ListGroup as=\"ul\" defaultActiveKey=\"#link1\">\n    {determineIfActive()}\n    </ListGroup>\n</>\n    )\n}\n\nexport default SavedTempos","import React from 'react';\nimport './Metronome.css';\nimport on from '../../on.svg';\nimport off from '../../off.svg';\nimport plus from '../../plus.svg';\nimport minus from '../../minus.svg';\nimport SavedTempos from '../SavedTempos/SavedTempos';\n\nclass Metronome extends React.Component\n{\n    constructor(props) {\n      super(props);\n      this.state = {\n          audioContext: null,\n          notesInQueue: [],\n          currentQuarterNote: 0,\n          tempo: localStorage.getItem('currentTempo') || 120,\n          lookahead: 25,    \n          scheduleAheadTime: 0.1,   \n          nextNoteTime: 0.0,\n          isRunning: false,\n          intervalID: null,\n          message: 'Quit all the malarkey and start practicing!'\n    }\n  }\n    nextNote = () =>\n    {\n        var secondsPerBeat = 60.0 / this.state.tempo;\n        this.setState({\n          nextNoteTime: this.state.nextNoteTime + secondsPerBeat,\n          currentQuarterNote: this.state.currentQuarterNote+1,\n        })\n        if (this.state.currentQuarterNote === 4) {\n          this.setState({\n            currentQuarterNote: 0\n          })\n        }\n    }\n    componentDidUpdate = () => {\n      localStorage.setItem('currentTempo', this.state.tempo);\n    }\n    scheduleNote = (beatNumber, time) =>\n    {\n        this.setState({\n          notesInQueue: ([...this.state.notesInQueue, { note: beatNumber, time: time }])\n        })\n        const osc = this.state.audioContext.createOscillator();\n        const envelope = this.state.audioContext.createGain();\n        osc.frequency.value = (beatNumber % 4 === 0) ? 1300 : 1000;\n        envelope.gain.value = 1;\n        envelope.gain.exponentialRampToValueAtTime(1, time + 0.001);\n        envelope.gain.exponentialRampToValueAtTime(0.001, time + 0.02);\n        osc.connect(envelope);\n        envelope.connect(this.state.audioContext.destination);\n        osc.start(time);\n        osc.stop(time + 0.03);\n    }\n    scheduler = () =>\n    {\n        while (this.state.nextNoteTime < this.state.audioContext.currentTime + this.state.scheduleAheadTime ) {\n            this.scheduleNote(this.state.currentQuarterNote, this.state.nextNoteTime);\n            this.nextNote();\n        }\n    }\n    start = () => \n    {\n        if (this.state.isRunning) return;\n\n        if (this.state.audioContext === null)\n        {\n            this.setState({\n              audioContext: new (window.AudioContext || window.webkitAudioContext)()\n            })\n        }\n        this.setState({\n          isRunning: true,\n          currentQuarterNote: 0,\n          nextNoteTime: 0 + 0.05,\n          intervalID: setInterval(() => this.scheduler(), this.state.lookahead)\n        })\n    }\n    stop = () =>\n    {\n        this.setState({\n          isRunning: false\n        })\n        clearInterval(this.state.intervalID);\n    }\n    startStop = () =>\n    {\n      console.log(this.state.tempo)\n        if (this.state.isRunning) {\n            this.stop();\n        }\n        else {\n            this.start();\n        }\n    }\n    tweakTempo = (direction, savedTempo) => {\n      if (direction === \"minus\") {\n        this.setState({\n          tempo: (parseInt(this.state.tempo) - 1)\n        })\n      } if (direction === \"add\") {\n        this.setState({\n          tempo: (parseInt(this.state.tempo) + 1)\n        }) \n      } else if (direction === \"custom\") {\n        this.setState({\n          tempo: parseInt(savedTempo)\n        })\n      }\n    }\n    saveSongToStorage = (action) => {\n      let songName = document.querySelector('#songName').value;\n      let songs;\n      if(localStorage.getItem('songs') === null) {\n        songs = {};\n      } else {\n        songs = JSON.parse(localStorage.getItem('songs'))\n      }\n      if (!songs[songName]) {\n        songs[songName] = this.state.tempo;\n      }\n      localStorage.setItem('songs', JSON.stringify(songs));\n    }\nrender() {\n  return (\n    <div className=\"metronome-container\">\n          <div className=\"metronome\">\n            <p>{this.state.message}</p>\n            <p className=\"current-bpm\"> {this.state.tempo} bpm</p>\n            <div className=\"slider\">\n            <img className=\"tempo-change\" src={minus} alt=\"decrease BPM by 1\" onClick={() => {\n              this.tweakTempo('minus')\n            }}/>\n            <input\n              type=\"range\"\n              min=\"60\"\n              max=\"240\"\n              value={this.state.tempo}\n              onChange={(e) => this.setState({\n                tempo: e.target.value\n              })}\n            />\n            <img className=\"tempo-change\" src={plus} alt=\"increase BPM by 1\" onClick={() => {\n              this.tweakTempo('add')\n            }}/>\n            </div>\n            <button onClick={() => this.startStop()}>\n              {this.state.isRunning ? <img className=\"on-off\" src={off} alt=\"turn off\" /> : <img className=\"on-off\" src={on} alt=\"turn on\" />}\n            </button>\n          <form className=\"save-tempo-form\">\n              <input type=\"text\" id=\"songName\" className=\"song-name-input\" placeholder=\"Type your song name\"></input>\n              <div class=\"save-clear-buttons\">\n            <button className=\"save-btn\" onClick={() => this.saveSongToStorage('save')}>SAVE</button>\n            <button className=\"clr-btn\" onClick={() => localStorage.clear()}>CLEAR</button>\n            </div>\n            </form>\n          </div>\n          <div className=\"saved-songs\">\n            <h2 className=\"saved-songs-header\">Saved Songs</h2>\n              {\n                localStorage.getItem('songs') &&\n                Object.keys(JSON.parse(localStorage.getItem('songs'))).map(song  => <SavedTempos clickHandler={this.tweakTempo} songName={song} currentTempo={this.state.tempo} tempo={JSON.parse(localStorage.getItem('songs'))[song]}/>)\n              }\n            </div>\n          </div>\n        )\n  }\n}\nexport default Metronome;","import React from 'react';\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            metrognome.\n        </div>\n    )\n}\n\nexport default Header;","import METROGNOME from './METROGNOME.png'\nimport './App.css';\nimport Metronome from './components/Metronome/Metronome'\nimport Header from './components/Header/Header';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Metronome />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}