{"version":3,"sources":["METROGNOME.png","on.svg","off.svg","plus.svg","minus.svg","components/SavedTempos/SavedTempos.js","components/Metronome/Metronome.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["SavedTempos","props","songName","tempo","clickHandler","console","log","className","onClick","Metronome","nextNote","secondsPerBeat","state","setState","nextNoteTime","currentQuarterNote","scheduleNote","beatNumber","time","notesInQueue","note","osc","audioContext","createOscillator","envelope","createGain","frequency","value","gain","exponentialRampToValueAtTime","connect","destination","start","stop","scheduler","currentTime","scheduleAheadTime","isRunning","window","AudioContext","webkitAudioContext","intervalID","setInterval","lookahead","clearInterval","startStop","tweakTempo","direction","savedTempo","parseInt","saveSongToStorage","action","songs","document","querySelector","localStorage","getItem","JSON","parse","setItem","stringify","checkTempo","message","this","src","minus","alt","type","min","max","onChange","e","target","plus","off","on","id","placeholder","class","clear","Object","keys","map","song","React","Component","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1a2e75c1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/METROGNOME.a4c7239d.png\";","export default __webpack_public_path__ + \"static/media/on.fd8c0096.svg\";","export default __webpack_public_path__ + \"static/media/off.e0c05eab.svg\";","export default __webpack_public_path__ + \"static/media/plus.d5048b9a.svg\";","export default __webpack_public_path__ + \"static/media/minus.fa839e7c.svg\";","import React, { Component } from 'react';\nimport './SavedTempos.css';\nconst SavedTempos = (props) => {\n    const { songName } = props;\n    const  { tempo } = props;\n    const { clickHandler } = props;\n    console.log(songName,  tempo)\n    return (\n        <div className=\"songs-container\">\n<button className=\"song-btn\" onClick={() => clickHandler('custom', tempo)}>{songName}</button>\n</div>\n    )\n}\n\nexport default SavedTempos","import React from 'react';\nimport './Metronome.css';\nimport on from '../../on.svg';\nimport off from '../../off.svg';\nimport plus from '../../plus.svg';\nimport minus from '../../minus.svg';\nimport SavedTempos from '../SavedTempos/SavedTempos';\n\nclass Metronome extends React.Component\n{\n    constructor(props) {\n      super(props);\n      this.state = {\n          audioContext: null,\n          notesInQueue: [],\n          currentQuarterNote: 0,\n          tempo: 120,\n          lookahead: 25,    \n          scheduleAheadTime: 0.1,   \n          nextNoteTime: 0.0,\n          isRunning: false,\n          intervalID: null,\n          message: 'Quit all the malarkey and start practicing!'\n    }\n  }\n    nextNote = () =>\n    {\n        var secondsPerBeat = 60.0 / this.state.tempo;\n        this.setState({\n          nextNoteTime: this.state.nextNoteTime + secondsPerBeat,\n          currentQuarterNote: this.state.currentQuarterNote+1,\n        })\n        if (this.state.currentQuarterNote === 4) {\n          this.setState({\n            currentQuarterNote: 0\n          })\n        }\n    }\n\n    scheduleNote = (beatNumber, time) =>\n    {\n        this.setState({\n          notesInQueue: ([...this.state.notesInQueue, { note: beatNumber, time: time }])\n        })\n        const osc = this.state.audioContext.createOscillator();\n        const envelope = this.state.audioContext.createGain();\n        osc.frequency.value = (beatNumber % 4 === 0) ? 1300 : 1000;\n        envelope.gain.value = 1;\n        envelope.gain.exponentialRampToValueAtTime(1, time + 0.001);\n        envelope.gain.exponentialRampToValueAtTime(0.001, time + 0.02);\n        osc.connect(envelope);\n        envelope.connect(this.state.audioContext.destination);\n        osc.start(time);\n        osc.stop(time + 0.03);\n    }\n\n    scheduler = () =>\n    {\n        while (this.state.nextNoteTime < this.state.audioContext.currentTime + this.state.scheduleAheadTime ) {\n            this.scheduleNote(this.state.currentQuarterNote, this.state.nextNoteTime);\n            this.nextNote();\n        }\n    }\n\n    start = () => \n    {\n        if (this.state.isRunning) return;\n\n        if (this.state.audioContext === null)\n        {\n            this.setState({\n              audioContext: new (window.AudioContext || window.webkitAudioContext)()\n            })\n        }\n        this.setState({\n          isRunning: true,\n          currentQuarterNote: 0,\n          nextNoteTime: 0 + 0.05,\n          intervalID: setInterval(() => this.scheduler(), this.state.lookahead)\n        })\n    }\n\n    stop = () =>\n    {\n        this.setState({\n          isRunning: false\n        })\n        clearInterval(this.state.intervalID);\n    }\n\n    startStop = () =>\n    {\n      console.log(this.state.tempo)\n        if (this.state.isRunning) {\n            this.stop();\n        }\n        else {\n            this.start();\n        }\n    }\n    tweakTempo = (direction, savedTempo) => {\n      if (direction === \"minus\") {\n        this.setState({\n          tempo: (parseInt(this.state.tempo) - 1)\n        })\n      } if (direction === \"add\") {\n        this.setState({\n          tempo: (parseInt(this.state.tempo) + 1)\n        }) \n      } else if (direction === \"custom\") {\n        this.setState({\n          tempo: parseInt(savedTempo)\n        })\n      }\n    }\n    saveSongToStorage = (action) => {\n      let songName = document.querySelector('#songName').value;\n      let songs;\n      if(localStorage.getItem('songs') === null) {\n        songs = {};\n      } else {\n        songs = JSON.parse(localStorage.getItem('songs'))\n      }\n      if (!songs[songName]) {\n        songs[songName] = this.state.tempo;\n      }\n      localStorage.setItem('songs', JSON.stringify(songs));\n    }\n    checkTempo = () => {\n      console.log(JSON.parse(localStorage.getItem('songs')))\n      if (this.state.tempo < 120) {\n        this.setState({\n          message: 'This be some love making music'\n        })\n      }\n      if (this.state.tempo >= 120 && this.state.tempo < 139) {\n          this.setState({\n            message: 'DIS BOPS DOE'\n          })\n      }\n      if (this.state.tempo >= 139 && this.state.tempo < 159) {\n        this.setState({\n          message: 'We rarely play in this tempo range. Challenge accepted?'\n        })\n      }\n      if (this.state.tempo >= 159 && this.state.tempo < 180) {\n        this.setState({\n          message: 'Get in the zone, your comfort zone'\n        })\n      }\n      if (this.state.tempo >= 181) {\n        this.setState({\n          message: 'You drank a lot of coffee...'\n        })\n      }\n    }\nrender() {\n  return (\n          <div className=\"metronome\">\n            <p>{this.state.message}</p>\n            <p className=\"current-bpm\"> {this.state.tempo} bpm</p>\n            <div className=\"slider\">\n            <img className=\"tempo-change\" src={minus} alt=\"decrease BPM by 1\" onClick={() => {\n              this.tweakTempo('minus')\n            }}/>\n            <input\n              type=\"range\"\n              min=\"60\"\n              max=\"240\"\n              value={this.state.tempo}\n              onChange={(e) => this.setState({\n                tempo: e.target.value\n              }, this.checkTempo())}\n            />\n            <img className=\"tempo-change\" src={plus} alt=\"increase BPM by 1\" onClick={() => {\n              this.tweakTempo('add')\n            }}/>\n            </div>\n            <button onClick={() => this.startStop()}>\n              {this.state.isRunning ? <img className=\"on-off\" src={off} alt=\"turn off\" /> : <img className=\"on-off\" src={on} alt=\"turn on\" />}\n            </button>\n\n\n            <form className=\"save-tempo-form\">\n              <input type=\"text\" id=\"songName\" className=\"song-name-input\" placeholder=\"song name\"></input>\n              <div class=\"save-clear-buttons\">\n            <button className=\"save-btn\" onClick={() => this.saveSongToStorage('save')}>SAVE</button>\n            <button className=\"clr-btn\" onClick={() => localStorage.clear()}>CLEAR</button>\n            </div>\n            </form>\n            <div className=\"saved-songs\">\n              {\n                localStorage.getItem('songs') &&\n                Object.keys(JSON.parse(localStorage.getItem('songs'))).map(song  => <SavedTempos clickHandler={this.tweakTempo} songName={song} tempo={JSON.parse(localStorage.getItem('songs'))[song]}/>)\n              }\n            </div>\n          </div>\n        )\n}\n}\n\nexport default Metronome;\n\n// const Metronome = () => {\n//   const [bpm, setBpm] = useState(120);\n//   const [playing, setPlaying] = useState(false);\n//   const [count, setCount] = useState(0);\n//   const [beatsInQueue, setBeats] = useState([]);\n//   const [nextNoteTime, setNextTime] = useState(0.0);\n//   const [audioContext, setAudioContext] = useState(null);\n//   const [intervalID, setIntervalID] = useState(null);\n  \n//   const nextNote = () => {\n//     let secondsPerBeat = 60 / bpm;\n//     setNextTime(secondsPerBeat);\n//     setCount(count+1);\n//     count === 4 && setCount(0);\n//   }\n\n//   const scheduleNote = (beatNumber, time) => {\n//     setBeats([...beatsInQueue, {note: beatNumber, time: time}])\n\n//     const osc = audioContext.createOscillator();\n//     const envelope = audioContext.createGain();\n        \n//     osc.frequency.value = (beatNumber % 4 === 0) ? 1000 : 800;\n//     envelope.gain.value = 1;\n//     envelope.gain.exponentialRampToValueAtTime(1, time + 0.001);\n//     envelope.gain.exponentialRampToValueAtTime(0.001, time + 0.02);\n\n//     osc.connect(envelope);\n//     envelope.connect(audioContext.destination);\n    \n//     osc.start(time);\n//     osc.stop(time + 0.03);\n// }\n\n// const scheduler = () => {\n//     // while there are notes that will need to play before the next interval, schedule them and advance the pointer.\n//     while (nextNoteTime < AudioContext.currentTime + 0.1 ) {\n//         scheduleNote(count, nextNoteTime);\n\n//         // Advance current note and time by a quarter note (crotchet if you're posh)\n//         setNextTime(60.0 / bpm); // Add beat length to last beat time\n//         setCount(count+1);    // Advance the beat number, wrap to zero\n//         if (count === 4) {\n//             setCount(0);\n//             nextNote();\n//         }\n//     }\n// }\n\n// const start = () =>\n// {\n//     if (playing) return;\n\n//     if (audioContext === null)\n//     {\n//       console.log('k')\n//         setAudioContext(new(window.AudioContext || window.webkitAudioContext)());\n//         console.log(audioContext, AudioContext)\n//     }\n\n//     setPlaying(true);\n//     setBeats(0);\n//     setNextTime(AudioContext.currentTime + 0.05);\n//     setIntervalID(setInterval(() => scheduler(), 25))\n// }\n\n// const stop = () =>\n// {\n//     setPlaying(false)\n//     setInterval(intervalID);\n// }\n\n// const startStop = () => {\n//     if (playing) {\n//         stop();\n//     }\n//     else {\n//         start();\n//     }\n// }\n//     return (\n//       <div className=\"metronome\">\n//         {bpm}\n//         <input\n//           type=\"range\"\n//           min=\"60\"\n//           max=\"240\"\n//           value={bpm}\n//           onChange={(e) => setBpm(e.target.value)}\n//         />\n//         <button onClick={() => startStop()}>\n//           {playing ? 'Stop' : 'Start'}\n//         </button>\n//         Metronome Component\n//       </div>\n//     )\n// }\n\n\n// export default Metronome;","import React from 'react';\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            metrognome.\n        </div>\n    )\n}\n\nexport default Header;","import METROGNOME from './METROGNOME.png'\nimport './App.css';\nimport Metronome from './components/Metronome/Metronome'\nimport Header from './components/Header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {/* <img alt=\"fashionable gnome\" src={METROGNOME} /> */}\n     <Metronome />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}